No.917 Make One With GCD
  →N個の要素からなる数列A
    →1<=N<=50
    →1<=Ai<=10^8
    →部分列を考える
      →最大公約数が1となるAの部分列の総数を求める
        →部分列として取る必要がある
          →DP?
            →最大公約数の数を保存していく
              →10^8であるため、mapでやる
              
No.939 and or
  →https://yukicoder.me/problems/no/939
    →x<=yかつx and y = A かつ x or y = Bを満たすものの個数を求める
      →0<=A,B<2^31
        →bit毎に考えそう
          →Aのbitはx,yともに全て立っている必要がある
          →Bのbitの組み合わせだけ考えれば良い
            →Aで立っているがBで立っていない場合は0個
            →Bで立っているがAで立っていないbitはxで1,yで1の2パターンある
              →x<=yなので先頭bitのみy固定になるため、出た答えを2で割る
              
No.727 仲介人moko
  →https://yukicoder.me/problems/no/727
  →品物を売ったり買ったり
    →品物の取引の流れの組み合わせの数を10^9+7で割った余りで求める
      →1<=N<=10^6
      →2N人のうち半数が売りたい人、半数が買いたい人
        →DPで行ける？
          →数字の選び方が増えるため難しそう
          →商品がある時にしか買う人は来ない
            →狼と羊の問題によく似ている
              →最初は売る人であり最後は買う人
          →どちらにしろ1000000*1000000のdpテーブルは作れない
      →売りたい人、買いたい人は区別される
        →各パターンに同じ数が掛けられるため問題なし
      →2000000C1000000のうちいくつが削られるのか
        →この考え方も難しい
          →先頭と最後は固定なので(2n-2)C(n-1)となる
        →ダメなパターンは各iで出すことが出来る
          →時間の流れが右から左と考える時 i=1to2N
            →iにおいて品物がない状態で買い物に来るパターンは
              →i-1C(i/2)となる
                →i-1において売られた数x==買われた数yとなるときiは買うものがない状態となる
                  →i+1以降の全てのパターンがダメとなる
                    →i-1まででダメなパターンが現れることがあるため、それを排除出来ないとこの計算は使えない
                      →iの組み合わせからi-1まで出た組み合わせを引いてやる
                        →するとi-1までで正当な数が出る？
                          →出ない(xi<yi)となる数も含まれてしまうため
                →ある地点でダメになる時それよりまえの地点でダメな時を引いて求めるとすると
                  →i-1の地点までの組み合わせ数を決められないためダメである
            →完全マッチングとして考える
              →2N個の中からある二つをマッチさせると残りは(2N-2)
                →2N-2から二つマッチさせると残りは2N-4
                  →といったように選ぶ組み合わせの数である
                    →先頭から選んでいっているのと同じ数え方になる
                      →これにN!を掛ければ終わり
                        →やり直す問題に入れておく

          
