状態遷移を見る
  1.範囲がどのようになるか →https://atcoder.jp/contests/abc147/tasks/abc147_eでは次第に範囲が広くなるが全ての状態が保持可能でチェック可能
  →DPで対応出来る

場合の数
  1.シーケンシャルな処理で一つ一つのステップが独立している、遷移出来る前の状態分を掛け算する
  → https://atcoder.jp/contests/sumitrust2019/tasks/sumitb2019_e

2^60とかになっていてxor
  1.bit毎に処理出来ないか
  2.桁dpか

この数字は作れるか
  1.普通に処理して作れるか
  2.二分探索で行けるか

余り
  1.ある合成数の素因数分解し、それぞれの素因数である数を割った余りがすべて同じ場合は、元の合成数で割った余りと同じになる
  →n=a^3*b*cとなっている場合にa^3,b,cのそれぞれで割った余り
  2.ある合成数以下の整数はそれぞれの素因数で割った余りが一意に決まる、周期は素因数をそれぞれ掛けた数となる

1<=N<=18くらいの場合
  1.全列挙可能、文字列のサイズが2Nとかだったりしても半分にして考えられたりする

ある数を別の数にする場合
  1.別の数からある数にする方法も考える 
    →https://atcoder.jp/contests/agc037/tasks/agc037_c
      →ある数から別の数へは数字を増やして到達させる
        →どれを増やせばいいのかわからない
      →別の数からある数へは数字を減らすことで到達できる
        →減らすときはどれを減らせばいいのか明確

最終的な状態
  1.ある状態になっているのが正しいか正しくないかを判定する時にその一手前の状態を見る
    →https://atcoder.jp/contests/arc012/tasks/arc012_3

倍数
  1.合成数は素因数まで分解して考える
    →そうでないと本質を間違い問題が解けない
      →https://atcoder.jp/contests/abc148/tasks/abc148_e


最終的にはぐぐる
　数学問題は特にぐぐれ→数学系で分からない問題は大抵e程度までで出てくる、ここを落とすと爆死する



