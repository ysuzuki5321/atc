状態遷移を見る
  1.範囲がどのようになるか →https://atcoder.jp/contests/abc147/tasks/abc147_eでは次第に範囲が広くなるが全ての状態が保持可能でチェック可能
  →DPで対応出来る
  2.範囲がどのようになるか、開始地点ではなくそのほかの地点を起点として範囲がどのようになっているのかを見る場合
    →https://atcoder.jp/contests/arc036/tasks/arc036_c 有効範囲が常に変化していくタイプ
      →https://blog.en30.net/2015/04/07/003011/ 範囲が0未満にならないように遷移していくタイプ
        →0=-1,1=+1として考えるが0110と並んでいる時に-1,0,1,0と遷移せず、0121と遷移させる
          →するとある地点からボーダーを越えた部分をカットする事が出来る

ある数a以上の値がどれだけ登場しているか
  1.a<=1000000程度であれば累積和で求められる
    →aiに対してcnt[ai]++を行い累積和

木構造で、ある頂点から出ている辺に関して、ある1つの辺を除いた合計等を出したいとき
  1.合計は事前に計算出来るため、木の端から処理していくことにより、高速に処理可能
    →https://atcoder.jp/contests/arc028/tasks/arc028_3
  
場合の数
  1.シーケンシャルな処理で一つ一つのステップが独立している、遷移出来る前の状態分を掛け算する
  → https://atcoder.jp/contests/sumitrust2019/tasks/sumitb2019_e

2^60とかになっていてxor
  1.bit毎に処理出来ないか
  2.桁dpか

この数字は作れるか
  1.普通に処理して作れるか
  2.二分探索で行けるか

余り
  1.ある合成数の素因数分解し、それぞれの素因数である数を割った余りがすべて同じ場合は、元の合成数で割った余りと同じになる
  →n=a^3*b*cとなっている場合にa^3,b,cのそれぞれで割った余り
  2.ある合成数以下の整数はそれぞれの素因数で割った余りが一意に決まる、周期は素因数をそれぞれ掛けた数となる

1<=N<=18くらいの場合
  1.全列挙可能、文字列のサイズが2Nとかだったりしても半分にして考えられたりする

ある数を別の数にする場合
  1.別の数からある数にする方法も考える 
    →https://atcoder.jp/contests/agc037/tasks/agc037_c
      →ある数から別の数へは数字を増やして到達させる
        →どれを増やせばいいのかわからない
      →別の数からある数へは数字を減らすことで到達できる
        →減らすときはどれを減らせばいいのか明確

最終的な状態
  1.ある状態になっているのが正しいか正しくないかを判定する時にその一手前の状態を見る
    →https://atcoder.jp/contests/arc012/tasks/arc012_3

倍数
  1.合成数は素因数まで分解して考える
    →そうでないと本質を間違い問題が解けない
      →https://atcoder.jp/contests/abc148/tasks/abc148_e
  2.掛け算が苦手
    →数式にして因数分解は必須

合計からどの要素を引いた場合でも合計以下の値にしたい
  1.降順にソートして処理をする

数字のペアがクロスして登場しているか判定
  1.数字をi,jとしてi,j,i,jの順番で登場していればクロスしている
    →https://atcoder.jp/contests/arc076/tasks/arc076_c

辿る処理を考える時はダブリングを検討する
  1.範囲を端から端までたどる時
  2.共通の親を探る時
  
複数個の数の最小公倍数の計算は(ai*(ai-1までのlcm))/gcd(a[i],(ai-1までのlcm))である
  
DPに関して注意点
  1.大きさを比較する時の対象は合っているか(currentと比較してないか、nextと比較しないと永久にnextの値が更新され続ける)
  2.次の場所に入れる値を間違っていないか(dp[next]=max(dp[current],dp[next])左の形式で代入しないと駄目である)

N^3まで可能なグラフでいくつかの場所を経由するという指定があるとき  
  →経由する場所の数によるが少なければワーシャルフロイドで出せる
    →https://yukicoder.me/problems/no/17

シミュレーションで入射角と反射角が同じ場合
  x,yを別々に考えられる
  正常な範囲収まるまで下記をループ
    0未満の場合はそのままの値を正の値にする
    limを超える場合は2*lim-vを次の値にする

計算式は最後まで書く
  https://atcoder.jp/contests/abc154/tasks/abc154_f
  ↑の問題で和を計算する時に=以降を書かなかったが、書いていたらその法則性を見つけられていた可能性が高い
    

最終的にはぐぐる
　数学問題は特にぐぐれ→数学系で分からない問題は大抵e程度までで出てくる、ここを落とすと爆死する



