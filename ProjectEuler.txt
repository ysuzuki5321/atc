Multiples of 3 and 5
  →10未満の整数で3か5の倍数をリストした場合、3,5,6,9の要素を得る、その総和は23
    →1000未満の3か5の倍数の総和は何か
      →プログラムでやれば簡単である
      →3と5等差数列の和から15の踏査数列を引けばいい
        →{333(3+999)}/2+{199(5+995)}/2-{66(15+990)}/2=166833+99500-33165=233168

Largest palindrome product
  →2桁の2つの数字を掛けて出来る最大の回文数は9009=91*99
    →3桁の2つの数字を掛けて出来る最大の回文数を求めよ
  →91*99は3*3*7*11*13となっている
    →7*9*11*13ともいえる
      →同じように連続した数字から探せないだろうか
        →全探索すれば簡単ではあるがO(1)でも表わせそうなだけに見つけたいところ
          →1桁目が0になる事はないので10は使われない
          →偶奇が混ざる場合に10の倍数が現れることもない
        →偶数桁の場合は11が約数として現れる
          →3桁3桁の場合は6桁なので11が入る 
            →普通にループでやった
            →O(1)で解いてる人はいなかった     

Smallest multiple
  →1~20までの数で均等に割り切れる最小の数
    →1~20の最小公倍数
      →2^4*3^2*5^1*7^1*11*13*17*19=232792560
    
Sum square difference
  →最初の10個の平方数の合計は1^2+2^2...+10^2=385
  →最初の10個の数の合計の平方は(1+2+...+10)^2=55^2=3025
  →最初の10個では？
    →(100(101)/2)^2-
    →平方数の合計は1^2+2^2+3^2+...100^2
    →1/6n(n+1)(2n+1)
    
10001st prime
  →最初の6個の素数は2,3,5,7,11,13で6個目は13
  →では10001個目の素数は？
    →素直にプログラムでやるのが良いと思われる

Largest product in a series
  →1000桁の数字の中で隣接した4つの数字で作られる最大の積は5832
  →では隣接した13の数字で作られる最大の積は？
  
Special Pythagorean triplet
  →ピタゴラスの定理はa^2+b^2=c^2
  →a+b+c=1000になるa,b,cは何か
    →c=√(a^2+b^2)
    →a+b+√(a^2+b^2)=1000
    →√(a^2+b^2)=1000-a-b
    →a^2+b^2=(1000-a-b)^2=1000000-1000a-1000b-1000a+a^2+ab-1000b+2ab+b^2=1000000-2000a-2000b+2ab
     →a^2+b^2=1000000-2000a-2000b+ab+a^2+b^2
     →2000a+2000b-2ab=1000000
     
Summation of primes
  →10未満の素数の合計は2+3+5+7=17
    →2000000未満の素数の合計は？
     →素数の問題がいくつかあるので篩は取っておく
    
Largest product in a grid
  →20*20のグリッドの中で隣接した4つの数字の積の中で一番大きいのは何か
    →普通にやる

Number letter counts
  →１から5までのwordを書き出すと、one,two,three,four,fiveで3+3+5+4+4=19 letters userd in total
    →１～1000までのwordの合計は何か？
      →100=handred 
      →one,two,three,four,five,six,seven,eight,nine,ten,eleven,twelve,t
 
Maximum path sum I
  →数字がピラミッド型に積まれていて、一番上から一番下まで移動しながら通過した場所の数字を足していく
    →移動できるのは左下か右下だけ
      →総和の最大を求めよ
        →再帰でやる
        →ボトムアップでも出来る
        
Counting Sundays
  →1901/1/1を月曜日としたとき2000/12/31まで、日曜日が月の始めに割り当てられている数を数えよう
  
Factorial digit sum
  →100!の各桁の数字を足すといくつになるか？
    →doubleを使用するかググる
      →doubleでは桁がつぶれていたため、ググった
      
Amicable numbers
  →d(n)はnを割り切れる数の合計とする
    →d(a)=bかつd(b)=aとなる数を友好的な数とする
      →10000未満の数のの友好的な数の合計を求めよ
        →全探索でも良さそうではある
        
Names scores
  →
  
Non-abundant sums
  →完全数nはn以外のnを割り切れる数を足したときに同じ数字になるものをいう
    →abundant number nは割り切れる数を足したときにnより大きくなる数字
  
---難しさの壁
1000-digit Fibonacci number
  →フィボナッチ数で1000桁ある数字のうち一番最初に出現する値
    →黄金比を使用するとのこと
      →https://www.xarg.org/puzzle/project-euler/problem-25/
      
Reciprocal cycles  
  →1/d d<1000の循環小数で循環している部分の桁数の最大
    →循環している部分の判定が難しい
      →循環していない部分の存在が厄介
        →例えば1293749749299のように後ろ99が連続していたとしてそれより前のところを循環していないと判定することは出来ない
        →余りが循環したらである
          →同じ余りが出てくるところまで繰り返す最大は1000であるため10000程度の配列を用意して処理すればよい
          
Quadratic primes
  →オイラーが二次関数n^2+n+41を発見
    →この数は0<=n<=39に対して素数を作り出す
    →n^2-79n+1601は0<=n<=79に対して素数を作る
      →n^2+an+b where |a|<1000 and |b|<1000
        →上のうちnが最大となる係数は何か、その時のnを求めよ
          →素数を2000000ほど作っておいて、あとは全探索する
            →2000*2000*1000程度にはなるか？
              →そこまで係数が大きくないため大丈夫
   
Number spiral diagonals
  →1から時計回りに渦巻を作り、1辺の要素が1001になるまで処理をする
    →ななめの合計を計算する
      →1,3,5,7,..,1001の平方数が右上に来る
        →その平方数を引き算していくと四隅が計算できる
          →1001であれば1000引いた数、999であれば998引いた数といったように計算出来る
            →ここで各奇数について考えると
              →t=x^2として
                →f(x)=t+(t-(x-1))+(t-2(x-1))+(t-3(x-1))=4t-6(x-1)
                  →1+sum(i=3to1001)f(i)となる

Distinct powers
  →a^b 2<=a<=5 2<=b<=5
    →get the following sequence of 15 distinct terms
      →4,8,9,16,25,27,32,64,81,125,243,256,625,1024,3125
  →2<=a<=100 2<=b<=100
    →からはいくつ出来るか
      →素因数の数で判断出来る
        →a<bである数に対してb<aである場合にb=a^cでa^c^a=a^bになる場合にその数を省ける
          →c*b<=100であれば省ける
        →2から順番に処理していく方が楽か？
          →篩にかけられる?
            →2^2,2^3,2^4,,,,はそれぞれ、4,8,16,に変換可能
              →4^1x,4^2o,4^3o...
              →8^1x,8^2o,8^3o...
              →これで100を超えるまで処理する
                →2次元テーブルに保存できる
                →              
               
         
          
