#include <stdio.h>
#include <string.h>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <iostream>
#include <utility>
#include <set>
#include <cctype>
#include <queue>
#include <stack>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <deque>
#include <limits>
#include <iomanip>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;

const ll INF = 1000000007;
ll gcd(ll a, ll b) {
	if (b == 0) return a;
	return gcd(b, a % b);
}
int pr[100010];
void uini(int n) {
	for (size_t i = 0; i <= n; i++)
	{
		pr[i] = i;
	}
}

int parent(int x) {
	if (x == pr[x]) return x;
	return pr[x] = parent(pr[x]);
}

bool unit(int x, int y) {
	int px = parent(x);
	int py = parent(y);

	if (px == py) return false;
	if (px < py) {
		pr[py] = px;
	}
	else {
		pr[px] = py;
	}
	return true;
}
ll ar[40];
int memo[1001][1001];
int revm[1001];
int rev(int x) {


	int &res = revm[x];
	if (~res) return res;
	res = 0;
	while (x > 0)
	{
		res *= 10;
		res += x % 10;
		x /= 10;
	}
	return res;
}
int rec(int n, int m) {

	int &res = memo[n][m];
	if (~res) return res;
	if (n == 0 || m == 0) return 0;
	memo[n][m] = 1;
	int nex = n;
	int ney = m;
	if (nex < ney) {
		nex = rev(nex);
	}
	else ney = rev(ney);

	if (nex < ney) {
		ney -= nex;
	}
	else nex -= ney;
	return res = rec(nex, ney);
}
int ok[301][301];
bool use[301][301];
void solv() {
	ll n;
	cin >> n;
	string tb[301];
	for (size_t i = 0; i < n; i++)
	{
		for (size_t j = 0; j < n; j++)
		{
			ok[i][j] = 1;
		}
	}
	for (size_t i = 0; i < n; i++)
	{
		cin >> tb[i];
	}

	int res = n * n;
	for (size_t i = 0; i < n; i++)
	{
		for (size_t j = 0; j < n; j++)
		{
			for (size_t k = 1; k + i < n; k++)
			{
				int nx = i + k;
				int ny = ((j + n) - k) % n;
				if (tb[i][j] != tb[nx][ny]) {

					for (size_t t = 0; t < n; t++)
					{
						int ndy = (k + t) % n;
						int dx = ((t + n) - i) % n;
						int dy = ((ndy + n) - j) % n;
						if (dx == 0 && dy == 1) {
							cout << endl;
						}
						if (!ok[dx][dy]) break;
						ok[dx][dy] = false;
						res--;
					}
				}
			}
		}
	}

	cout << res << endl;
}




int main() {
	solv();

	return 0;
}
